import telebot
from telebot import types
import sqlite3, time

token = '6996853829:AAHxgnJNE95b3iMk2lhnV9Oxhv_mUQ_fsd4'
bot = telebot.TeleBot(token)
database = sqlite3.connect('database', check_same_thread=False)
cursor = database.cursor()

defoltVariable = "defoltPicture.png"

def bd(message):
    cursor.execute('SELECT user_chat_id FROM users_fin WHERE user_chat_id=?', (message.chat.id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute('INSERT INTO users_fin VALUES(?, ?, ?, ?, ?)', (
        message.chat.id, message.chat.first_name, message.chat.last_name, f'@{message.chat.username}', '0'))
        database.commit()
    else:
        cursor.execute(f'UPDATE users_fin SET user_chat_id=?, user_name=?, user_surname=?, user_username=?, user_budget=? WHERE user_chat_id=?',(message.chat.id, message.chat.first_name, message.chat.last_name, f'@{message.chat.username}', '0', '0'))
        database.commit()

def bd_rub_price_update(main ,message):
    Variable = main
    try:
        cursor.execute(f'UPDATE users_fin SET user_budget=? WHERE user_chat_id=?', (Variable, message.chat.id,))
        database.commit()
    except:
        bd_rub_price_update(Variable, message)

def bd_rub_price_select(message):
    try:
        cursor.execute('SELECT user_budget FROM users_fin WHERE user_chat_id=?', (message.chat.id,))
        VariableList = cursor.fetchall()
        for i in VariableList:
            for Variable in i:
                return Variable if Variable is not None else None
    except:
        bd_rub_price_select(message)

def price_rub(message):
    file = open(f'./main_photo/{defoltVariable}', 'rb')
    markup = types.InlineKeyboardMarkup()
    if message.content_type == 'voice':
        bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è! –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç!',parse_mode='html')
        bot.register_next_step_handler(message, price_rub)
    elif message.content_type == 'document':
        bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è! –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç!',parse_mode='html')
        bot.register_next_step_handler(message, price_rub)
    elif message.content_type == 'video_note':
        bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è! –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç!',parse_mode='html')
        bot.register_next_step_handler(message, price_rub)
    elif message.content_type == 'sticker':
        bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è! –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç!',parse_mode='html')
        bot.register_next_step_handler(message, price_rub)
    elif message.content_type == 'video':
        bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è! –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç!',parse_mode='html')
        bot.register_next_step_handler(message, price_rub)
    elif message.content_type == 'photo':
        bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è! –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç!', parse_mode='html')
        bot.register_next_step_handler(message, price_rub)
    if message.content_type == 'text':
        if message.text == r'/start':
            start_function(message)
        else:
            try:
                budget = int(message.text)
            except ValueError:
                bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º)! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',reply_markup=markup, parse_mode='html')
                bot.register_next_step_handler(message, price_rub)
                return
            if budget <= 0:
                bot.send_photo(message.chat.id, file,f'–û—à–∏–±–∫–∞ (—Ü–µ–Ω–∞ ‚â§ 0)! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',reply_markup=markup, parse_mode='html')
                bot.register_next_step_handler(message, price_rub)
                return
            else:
                bd_rub_price_update(budget, message)
                budget_bd = bd_rub_price_select(message)
                budgetLoans = int(float(budget_bd) * 0.3)
                budgetEat = int(float(budget_bd) * 0.3)
                budgetTransport = int(float(budget_bd) * 0.08)
                budgetInvestment = int(float(budget_bd) * 0.1)
                budgetServices = int(float(budget_bd) * 0.15)
                budgetFun = int(float(budget_bd) * 0.07)
                first = types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ üîÑ', callback_data='budgetBtn')
                markup.row(first)
                second = types.InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†', callback_data='mainBack')
                markup.row(second)
                file2 = open(f'./main_photo/{defoltVariable}', 'rb')
                bot.send_photo(message.chat.id, file2, f'–í–∞—à –±—é–¥–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>{budget_bd}</b> —Ä—É–±–ª–µ–π.\n\n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≤–µ—Ç—É–µ—Ç –≤–∞–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n–ö—Ä–µ–¥–∏—Ç—ã –∏ –∏–ø–æ—Ç–µ–∫–∏ ‚Äî 30%: <b>{budgetLoans}</b> —Ä—É–±–ª–µ–π\n\n–ü–∏—Ç–∞–Ω–∏–µ ‚Äî 30%: <b>{budgetEat}</b> —Ä—É–±–ª–µ–π\n\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Äî 8%: <b>{budgetTransport}</b> —Ä—É–±–ª–µ–π\n\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ‚Äî 10%: <b>{budgetInvestment}</b> —Ä—É–±–ª–µ–π\n\n–ñ–ö–• –∏ —Å–≤—è–∑—å ‚Äî 15%: <b>{budgetServices}</b> —Ä—É–±–ª–µ–π\n\n–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ‚Äî 7%: <b>{budgetFun}</b> —Ä—É–±–ª–µ–π', reply_markup=markup, parse_mode='html')

@bot.message_handler(commands=["start"])
def start_function(message):
    bd(message)
    markup = types.InlineKeyboardMarkup()
    first = types.InlineKeyboardButton('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç üí∏', callback_data='budgetBtn')
    markup.row(first)
    file = open(f'./main_photo/{defoltVariable}', 'rb')
    bot.send_photo(message.chat.id, file, "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∏—Ç—å—Å—è –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ (–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –†–£–¢ –ú–ò–ò–¢)!",reply_markup=markup, parse_mode='html')

@bot.message_handler(content_types=['text', 'voice', 'document', 'photo', 'video', 'video_note', 'sticker'])
def unnecessary_text_function(message):
    markup = types.InlineKeyboardMarkup()
    first = types.InlineKeyboardButton('–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è! üò¢', callback_data='wellBtn')
    markup.row(first)
    file = open(f'./main_photo/{defoltVariable}', 'rb')
    bot.send_photo(message.chat.id, file,'–ù–µ –≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–π –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–∞–π–ª—ã, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–∑–∞–ø–∏—Å–∏ –∏–ª–∏ –≤–∏–¥–µ–æ–æ–±—Ä–∞—â–µ–Ω–∏—è <b>–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö —ç—Ç–æ!</b>',reply_markup=markup, parse_mode='html')

@bot.callback_query_handler(func=lambda callback: True)
def callback_function(callback):
    if callback.data == 'mainBack':
        bd(callback.message)
        markup = types.InlineKeyboardMarkup()
        first = types.InlineKeyboardButton('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç üí∏', callback_data='budgetBtn')
        markup.row(first)
        file = open(f'./main_photo/{defoltVariable}', 'rb')
        bot.edit_message_media(types.InputMediaPhoto(file), callback.message.chat.id, callback.message.message_id)
        bot.edit_message_caption("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∏—Ç—å—Å—è –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ (–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –†–£–¢ –ú–ò–ò–¢)!", callback.message.chat.id, callback.message.message_id, reply_markup=markup, parse_mode="html")
    if callback.data == 'wellBtn':
            try:
                bot.delete_message(callback.message.chat.id, callback.message.message_id)
                bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
            except:
                bot.send_message(callback.message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
    if callback.data == 'budgetBtn':
            markup = types.InlineKeyboardMarkup()
            file = open(f'./main_photo/{defoltVariable}', 'rb')
            bot.edit_message_media(types.InputMediaPhoto(file), callback.message.chat.id, callback.message.message_id)
            bot.edit_message_caption(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç, —á—Ç–æ–±—ã –º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –µ–≥–æ –ø–æ –Ω–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º!',callback.message.chat.id,callback.message.message_id, reply_markup=markup, parse_mode="html")
            bot.register_next_step_handler(callback.message, price_rub)
